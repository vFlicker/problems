/*
  Дана сітка розміром n * m. Ви розташовані у лівому
  верхньому куті сітки і ваша мета — дістатися правому
  нижньому куту. Ви можете рухатися тільки вниз або вправо.

  Напишіть функцію, яка обчислює кількість унікальних
  шляхів для досягнення цієї мети. Функція повинна
  приймати два аргументи: n — кількість рядків у сітці
  та m — кількість стовпців у сітці.

  Час виконання функції має бути O(n * m).
*/

/**
 * Складність за часом — O(n * m).
 * Складність за пам'яттю — O(n * m).
 */
const createUniquePaths = () => {
  const map = new Map();

  // Функція для генерації унікального ключа для кешування результатів
  const getHash = (n, m) => `${n} ${m}`;

  const getPaths = (n, m) => {
    // Якщо вихід знаходиться зліва або справа від початку
    // значить способів добратися до нього немає
    if (n <= 0 || m <= 0) {
      return 0;
    };

    // Якщо вихід знаходиться там же, де і вхід
    if (n === 1 && m === 1) {
      return 1;
    };

    const hash = getHash(n, m);
    if (!map.has(hash)) {
      // Якщо результат не був обчислений раніше, то обчислюємо його
      const paths = getPaths(n - 1, m) + getPaths(n, m - 1);
      map.set(hash, paths);
    }

    return map.get(hash);
  };

  return getPaths;
};

/**
 * Складність за часом — O(n * m).
 * Складність за пам'яттю — O(n * m).
 */
const uniquePaths = (n, m) => {
  // Створюємо двовимірний масив arrays розміром (n + 1) * (m + 1)
  // та заповнюємо його нулями
  const arrays = Array.from({ length: n + 1 }, () => new Array(m + 1).fill(0));

  const helper = (n, m, arrays) => {
    if (n <= 0 || m <= 0) {
      return 0
    }

    if (n === 1 && m === 1) {
      return 1;
    }
  
    if (arrays[n][m] !== 0) {
      // Якщо результат уже обчислений, повертаємо його
      return arrays[n][m];
    };
  
    // Рекурсивно обчислюємо кількість унікальних шляхів
    // та зберігаємо їх у масиві
    arrays[n][m] = helper(n - 1, m, arrays) + helper(n, m - 1, arrays);
  
    return arrays[n][m];
  };

  return helper(n, m, arrays);
};

console.log(createUniquePaths()(5, 4)); // 35
console.log(uniquePaths(4, 5)); // 35
